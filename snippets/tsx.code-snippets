{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "div with curly bracket": {
        "prefix": "divx",
        "body": [
            "<div className={$1}>$2</div>"
        ],
        "description": "Create a div element with curly bracket"
    },
    "Component Template": {
        "prefix": "comp",
        "body": [
            "// REACT IMPORTS",
            "",
            "// NEXT IMPORTS",
            "",
            "// COMPONENT IMPORTS",
            "",
            "// MANTINE IMPORTS",
            "",
            "// NETWORK IMPORTS",
            "",
            "// TYPE IMPORTS",
            "",
            "// FUNCTION IMPORTS",
            "",
            "// STYLE IMPORTS ",
            "",
            "interface Props {",
            "",
            "}",
            "",
            "const ${1:$TM_FILENAME_BASE} = (props: Props) => {",
            "    return (",
            "        <div>${1:$TM_FILENAME_BASE}</div>",
            "    )",
            "}",
            "",
            "export default ${1:$TM_FILENAME_BASE};"
        ],
        "description": "Component Template"
    },
    "API Request": {
        "prefix": "api",
        "body": [
            "const request = async () => {",
            "    ",
            "    const req = new ${1:endpoint}();",
            "    req.input();",
            "    const res = await req.fetch();",
            "    ",
            "    if (res.success) {",
            "      ",
            "    } else {",
            "",
            "    }",
            "}"
        ],
        "description": "API Request"
    },
    "Base Route": {
        "prefix": "route",
        "body": [
            "// REACT IMPORTS",
            "",
            "// NEXT IMPORTS",
            "import { NextPageContext } from \"next\"; ",
            "",
            "// COMPONENT IMPORTS",
            "",
            "// MANTINE IMPORTS",
            "",
            "// NETWORK IMPORTS",
            "",
            "// TYPE IMPORTS",
            "",
            "// FUNCTION IMPORTS",
            "",
            "// STYLE IMPORTS ",
            "",
            "interface Props {",
            "",
            "}",
            "",
            "const ${1:$TM_FILENAME_BASE} = (props: Props) => {",
            "    return (",
            "        <div>${1:$TM_FILENAME_BASE}</div>",
            "    )",
            "}",
            "",
            "export default ${1:$TM_FILENAME_BASE};",
            "",
            "export const getServerSideProps = async (ctx: NextPageContext) => {",
            "    try {",
            "        return { props: {} };",
            "    } catch (err) {",
            "        return { props: { error: err } };",
            "    }",
            "}"
        ],
        "description": "Base Route"
    },
    "Create Context": {
        "prefix": "createcontext",
        "body": [
            "import { createContext } from \"react\";",
            "",
            "",
            "interface ${1:$TM_FILENAME_BASE} {",
            "    children: React.ReactNode;",
            "}",
            "",
            "interface ${1:$TM_FILENAME_BASE} {",
            "",
            "}",
            "",
            "export const ${1:$TM_FILENAME_BASE} = createContext<${1:$TM_FILENAME_BASE}>({",
            "})",
            "",
            "export const ${1:$TM_FILENAME_BASE}Provider = ({ children }: ${1:$TM_FILENAME_BASE}) => {",
            "    return (",
            "        <${1:$TM_FILENAME_BASE}.Provider value={{",
            "            ",
            "        }}>",
            "            {children}",
            "        </${1:$TM_FILENAME_BASE}.Provider>",
            "    );",
            "};"
        ],
        "description": ""
    }
}